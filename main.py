import logging
import time

from db import db_start, create_profile, add_product, get_user, update_user_data, get_product, next_page, previous_page, \
    set_page
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher import FSMContext
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
from aiogram.types.input_media import InputMedia, MediaGroup, InputFile
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from keyboard import profile_menu, back_button, catalog_keyboard, back_catalog_button, help_buttons
import config
from aiogram.types import ReplyKeyboardRemove, \
    ReplyKeyboardMarkup, KeyboardButton, \
    InlineKeyboardMarkup, InlineKeyboardButton

# log
logging.basicConfig(level=logging.INFO)

# init
storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)

# prices
PRICE = types.LabeledPrice(label="–§—É—Ç–±–æ–ª–∫–∞ ", amount=1500 * 100)  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö (—Ä—É–±)


class UserState(StatesGroup):
    new_information = State()
    help_chat = State()


class AdminState(StatesGroup):
    new_product = State()


async def on_startup(_):
    await db_start()


# start
@dp.message_handler(commands=['start'])
async def buy(message: types.Message):
    # GOODS: id, count
    await create_profile(message.from_user.id)
    await bot.send_message(message.chat.id,
                           f'–ü—Ä–∏–≤–µ—Ç, —è –±–æ—Ç —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –Ω–∞—à–∏ –≤–µ—â–∏!\n –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∫—É–ø–æ–∫ –≤–≤–µ–¥–∏—Ç–µ /menu')


@dp.message_handler(commands=['menu'])
async def menu(message: types.Message):
    profile_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=profile_menu)
    await bot.send_message(message.chat.id, "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≤–∞–º —Ñ—É–Ω–∫—Ü–∏—é –±–æ—Ç–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏—à—É:",
                           reply_markup=profile_keyboard)


@dp.message_handler(text="üîô –ù–∞–∑–∞–¥")
async def menu_back(message: types.Message):
    profile_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=profile_menu)
    await bot.send_message(message.chat.id, text="üßπ –ß–∏—Å—Ç–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã", reply_markup=ReplyKeyboardRemove())
    time.sleep(0.1)
    await bot.send_message(chat_id=message.from_user.id, text="MENU\n",
                           reply_markup=profile_keyboard)


@dp.message_handler(commands=['catalog'])
async def back_to_catalog(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    media = MediaGroup()
    product_card = await get_product(user_data['page'] + 1)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    product_card = await get_product(user_data['page'] + 2)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    await bot.send_message(callback.from_user.id, text="üîÑ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è üîÑ", reply_markup=catalog_keyboard)
    time.sleep(0.1)
    await bot.send_media_group(callback.from_user.id, media=media)
    # callback.message.edit_media(InputMedia(f"{product_card['image_link']}", caption=f"{product_card['product']


""" –ø–æ–¥ –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä
@dp.message_handler(text="2Ô∏è‚É£")
async def first_product(message: types.Message):
    back_catalog = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=back_catalog_button)
    await bot.send_message(message.chat.id, text="üí≥ –ì–æ—Ç–æ–≤–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫ –æ–ø–ª–∞—Ç–µ", reply_markup=ReplyKeyboardRemove())
    user_data = await get_user(message.from_user.id)
    product_card = await get_product(user_data['page'] + 2)
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –≤–µ—â–∏",
                           description=f"–ö—É–ø–∏—Ç—å {product_card['product']}",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url=product_card['image_link'],
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")
    await bot.send_message(message.chat.id, text="–î–ª—è –≤—ã—Ö–æ–¥–∞ –æ–±—Ä–∞—Ç–Ω–æ –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤–≤–µ–¥–∏—Ç–µ /catalog")
"""


@dp.message_handler(text="‚úÖ –ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏")
async def first_product(message: types.Message):
    back_catalog = InlineKeyboardMarkup(resize_keyboard=True).add(
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_catalog"))  # inline_keyboard=back_catalog_button)
    await bot.send_message(message.chat.id, text="üí≥ –ì–æ—Ç–æ–≤–∏–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –∫ –æ–ø–ª–∞—Ç–µ", reply_markup=ReplyKeyboardRemove())
    time.sleep(0.1)

    user_data = await get_user(message.from_user.id)
    product_card = await get_product(user_data['page'] + 1)
    await bot.send_invoice(message.chat.id,
                           title="–ü–æ–∫—É–ø–∫–∞ –≤–µ—â–∏",
                           description=f"–ö—É–ø–∏—Ç—å {product_card['product']}",
                           provider_token=config.PAYMENTS_TOKEN,
                           currency="rub",
                           photo_url=f"{product_card['image_link']}",
                           photo_width=416,
                           photo_height=234,
                           photo_size=416,
                           is_flexible=False,
                           prices=[PRICE],
                           start_parameter="one-month-subscription",
                           payload="test-invoice-payload")
    await bot.send_message(message.chat.id, text="–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥ –≤–≤–µ–¥–∏—Ç–µ /catalog")


@dp.callback_query_handler(text='back_to_menu')
async def menu_callback(callback: types.CallbackQuery):
    profile_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=profile_menu)
    await callback.message.edit_text("MENU\n", reply_markup=profile_keyboard)


@dp.message_handler(commands=['new_product'])
async def new_product(message: types.Message, state: FSMContext):
    if message.from_user.id in config.sellers:
        await bot.send_message(message.chat.id,
                               "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞(–Ω–∞–∑–≤–∞–Ω–∏–µ, —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É, –æ–ø–∏—Å–∞–Ω–∏–µ)")
        await AdminState.new_product.set()
    else:
        await bot.send_message(message.chat.id,
                               "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")


@dp.message_handler(state=AdminState.new_product)
async def new_product2(message: types.Message, state: FSMContext):
    product_data = message.text.split(', ', maxsplit=2)
    await state.finish()
    await add_product(product_data[0], product_data[1], product_data[2])


@dp.callback_query_handler(text='profile')
async def profile(callback: types.CallbackQuery, state: FSMContext):
    user_data = await get_user(callback.from_user.id)
    back_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=back_button).add(
        InlineKeyboardButton(text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", callback_data="give_information"))

    try:
        await callback.message.edit_text(f"ü™™ ID: {user_data['user_id']}\n\n"
                                         f"üë§ –§–ò–û: {user_data['username'] if user_data['username'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                         f"üè† –ê–¥—Ä–µ—Å: {user_data['adress'] if user_data['adress'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                         f"üì™ –ò–Ω–¥–µ–∫—Å: {user_data['indx'] if user_data['indx'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                         f"‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number'] if user_data['phone_number'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                         f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {user_data['order_value']}\n\n"
                                         f"üî• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {user_data['personal_sale']}%\n\n"
                                         f"üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {user_data['notes'] if user_data['notes'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}",
                                         reply_markup=back_keyboard)
    except:
        await callback.edit_text(f"ü™™ ID: {user_data['user_id']}\n\n"
                                 f"üë§ –§–ò–û: {user_data['username'] if user_data['username'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                 f"üè† –ê–¥—Ä–µ—Å: {user_data['adress'] if user_data['adress'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                 f"üì™ –ò–Ω–¥–µ–∫—Å: {user_data['indx'] if user_data['indx'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                 f"‚òéÔ∏è –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['phone_number'] if user_data['phone_number'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}\n\n"
                                 f"üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: {user_data['order_value']}\n\n"
                                 f"üî• –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {user_data['personal_sale']}\n\n"
                                 f"üóí –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {user_data['notes'] if user_data['notes'] else '–Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ'}",
                                 reply_markup=back_keyboard)


@dp.callback_query_handler(text='give_information')
async def give_information(callback: types.CallbackQuery):
    user_data = await get_user(callback.from_user.id)
    kb = [[]]
    text = False
    for i in user_data.items():
        if i[0] == "phone_number":
            text = "–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        elif i[0] == "username":
            text = "–§–ò–û"
        elif i[0] == "adress":
            text = "–ê–¥—Ä–µ—Å"
        elif i[0] == "indx":
            text = '–ò–Ω–¥–µ–∫—Å'
        elif i[0] == "notes":
            text = "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è"
        if text:
            kb[0].append(InlineKeyboardButton(text=f"{text}", callback_data=f"new_data:{text}"))
        text = False
    information_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=kb)
    information_keyboard.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="profile"))
    try:
        await callback.message.edit_text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=information_keyboard)
    except:
        await callback.edit_text("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=information_keyboard)


@dp.callback_query_handler(text_startswith='new_data:')
async def send_data(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π {callback.data[9:]}" if callback.data[9:] == "–ü—Ä–∏–º–µ—á–∞–Ω–∏—è" else "–ù–∞–ø–∏—à–∏—Ç–µ –ü—Ä–∏–º–µ—á–∞–Ω–∏—è")
    await UserState.new_information.set()
    await state.update_data(type=callback.data[9:])


@dp.message_handler(state=UserState.new_information)
async def enter_new_inf(message: types.Message, state: FSMContext):
    message_data = message.text
    type = await state.get_data()
    if type['type'] == '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞':
        update_user_data(message.from_user.id, phone_number=message_data)
    elif type['type'] == '–§–ò–û':
        update_user_data(message.from_user.id, username=message_data)
    elif type['type'] == '–ê–¥—Ä–µ—Å':
        update_user_data(message.from_user.id, address=message_data)
    elif type['type'] == '–ò–Ω–¥–µ–∫—Å':
        update_user_data(message.from_user.id, indx=message_data)
    elif type['type'] == '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è':
        update_user_data(message.from_user.id, notes=message_data)
    await state.finish()
    msg_call = await bot.send_message(message.from_user.id, '¬∑')
    msg_call['from']['id'] = message.from_user.id
    await give_information(msg_call)


@dp.callback_query_handler(text='catalog')
async def catalog(callback: types.CallbackQuery):
    await set_page(callback.from_user.id, -1)
    user_data = await get_user(callback.from_user.id)
    media = MediaGroup()
    product_card = await get_product(user_data['page'] + 1)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    product_card = await get_product(user_data['page'] + 2)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    await bot.send_message(callback.from_user.id, text="üîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è üîÑ", reply_markup=catalog_keyboard)
    time.sleep(0.1)

    await bot.send_media_group(callback.from_user.id, media=media)
    # callback.message.edit_media(InputMedia(f"{product_card['image_link']}", caption=f"{product_card['product']}"), reply_markup=catalog_keyboard)


# next page
@dp.message_handler(text="‚û°Ô∏è")
async def next_pages(message: types.Message):
    media = MediaGroup()
    await next_page(message.from_user.id)
    user_data = await get_user(message.from_user.id)
    product_card = await get_product(user_data['page'] + 1)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    product_card = await get_product(user_data['page'] + 2)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    await bot.send_media_group(message.from_user.id, media=media)


@dp.message_handler(text="‚¨ÖÔ∏è")
async def prev_pages(message: types.Message):
    media = MediaGroup()
    await previous_page(message.from_user.id)
    user_data = await get_user(message.from_user.id)
    product_card = await get_product(user_data['page'] + 1)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    product_card = await get_product(user_data['page'] + 2)
    media.attach_photo(photo=f"{product_card['image_link']}", caption=f"{product_card['product']}")
    await bot.send_media_group(message.from_user.id, media=media)


@dp.callback_query_handler(text='about_project')
async def about_project(callback: types.CallbackQuery):
    back_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=back_button)
    await callback.message.edit_text(
        f"–ú—ã —Å–æ–∑–¥–∞—Ç–µ–ª–∏ –±—Ä–µ–Ω–¥–∞ Veste –ù–∏–∫–∏—Ç–∞ –∏ –°–∞—à–∞.\n<b>–ò—Å—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∏—è:</b>\n–ú—ã –∑–Ω–∞–∫–æ–º—ã –∏ –æ–±—â–∞–µ–º—Å—è –æ—á–µ–Ω—å –¥–∞–≤–Ω–æ –∏"
        f" –≤ –º–æ–º–µ–Ω—Ç–µ –ø—Ä–∏—à–ª–∞ –∏–¥–µ—è —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–π"
        f" –±—Ä–µ–Ω–¥ –æ–¥–µ–∂–¥—ã –∏ –º—ã —Ä–µ—à–∏–ª–∏ –∑–∞–Ω—è—Ç—å—Å—è —ç—Ç–∏–º"
        f"–°–¥–µ–ª–∞–ª–∏ –±–æ—Ç–∞,"
        f" –Ω–∞–Ω—è–ª–∏ —Ç–≤–æ—Ä—á–µ—Å–∫–∏—Ö\n—Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –∑–∞ —Ä–µ—Å–ø–µ–∫—Ç (–ö—Ä–∏—Å—Ç–∏–Ω–∞\n—Å–ø–∞—Å–∏–±–æ), –Ω–∞—à–ª–∏ —Ñ–∞–±—Ä–∏–∫–∏ —Å –ª—É—á—à–∏–º "
        f"–∫–∞—á–µ—Å—Ç–≤–æ–º\n(–≤–µ–¥—å –∏ —Å–∞–º–∏ –∏—Ö –Ω–æ—Å–∏–º) –∏ —Ä–∞–¥—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å\n–≤–∞–º –Ω–∞—à–∏ –≤–µ—â–∏. –í –∫–∞–∂–¥—ã–π –ø—Ä–∏–Ω—Ç –≤–ª–æ–∂–µ–Ω–∞ "
        f"—Å–≤–æ—è(–∏)\n–∏–¥–µ—è(–∏) –∏ —ç–º–æ—Ü–∏–∏, –Ω–æ –≤—ã –≤ –ø—Ä–∞–≤–µ —Å–∞–º–∏ —Ä–µ—à–∞—Ç—å,\n—á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≥–ª—è–¥—è –Ω–∞ –Ω–∏—Ö, —Ö–æ—Ç—è –¥–ª—è –∫–∞–∂–¥–æ–π"
        f"\n—Ä–∞–±–æ—Ç—ã –µ—Å—Ç—å —Å–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—É—á—à–µ–µ,\n–≤—ã–±–∏—Ä–∞–π—Ç–µ <i>veste!</i>\n\n<a href='t.me/vestej'>–ù–∞—à –∫–∞–Ω–∞–ª</a>",
        parse_mode="HTML", reply_markup=back_keyboard)


@dp.callback_query_handler(text='help_chat')
async def help_chat(callback: types.CallbackQuery):
    help_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=help_buttons)
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:\n", reply_markup=help_keyboard)


@dp.callback_query_handler(text='help_message')
async def help_chat(callback: types.CallbackQuery):
    back_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=back_button)
    await callback.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤–∞–º", reply_markup=back_keyboard)
    await UserState.help_chat.set()

@dp.callback_query_handler(text='faq')
async def about_project(callback: types.CallbackQuery):
    back_keyboard = InlineKeyboardMarkup(resize_keyboard=True, inline_keyboard=back_button)
    await callback.message.edit_text(
        f"<a href='t.me/vestej'>–ù–∞—à –∫–∞–Ω–∞–ª</a>",
        parse_mode="HTML", reply_markup=back_keyboard)

@dp.message_handler(state=UserState.help_chat)
async def help_redirect(message: types.Message, state: FSMContext):
    await bot.forward_message(config.admins[0], message.chat.id, message.message_id)
    time.sleep(0.1)
    await message.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞")
    await state.finish()


# pre checkout  (must be answered in 10 seconds)
@dp.pre_checkout_query_handler(lambda query: True)
async def pre_checkout_query(pre_checkout_q: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


# successful payment
@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
    # PROMO: promo_code, count (default 1)
    print("SUCCESSFUL PAYMENT:")
    payment_info = message.successful_payment.to_python()
    for k, v in payment_info.items():
        print(f"{k} = {v}")

    # ORDERS: payment_id / user_id / status
    message_reply = await bot.send_message(message.chat.id,
                                           f"‚úÖ –ü–ª–∞—Ç—ë–∂ –Ω–∞ —Å—É–º–º—É {message.successful_payment.total_amount // 100} "
                                           f"{message.successful_payment.currency} –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!"
                                           f"\n\n–° –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞")


@dp.message_handler(content_types=ContentType.CONTACT)
async def contact(message: types.Message):
    # TODO check order
    await send_message_to_logs(message)


async def send_message_to_logs(message: types.Message):
    await bot.forward_message(1001838206565, message.chat.id, message.message_id)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
